USE Org_DB

SET XACT_ABORT ON

DECLARE @subject varchar(max)		= 'ANE-100XXX Template to Void Receipt'
DECLARE @author varchar(max)		= 'Jesse Wei'
DECLARE @created_date datetime		= '11/08/2019'
DECLARE @type varchar(max)			= 'Rollback'
DECLARE @description varchar(max)	= ''
DECLARE @org varchar(100) = DB_NAME()
DECLARE @return int
EXEC @return = rollbackdb.dbo.audit_datafix @org, @subject, @author, @created_date, @type, @description
IF @@ERROR > 0 OR @return = -1 RETURN

IF EXISTS(SELECT * FROM RECEIPTHEADERS WHERE RECEIPTNUMBER = 1001230.333 AND VOIDED = 0) OR OBJECT_ID('rollbackdb.dbo.ANE_100XXX_RECEIPTHEADERS') IS NULL BEGIN
	PRINT 'Nothing to roll back. Datafix has not been deployed yet.'
	RETURN
END

DECLARE @voided int = 0
DECLARE @voidedby int = 0
DECLARE @voidedon datetime = '1899-12-30'
DECLARE @voiddesc varchar(30) = 'Void by ANE-100XXX'

DECLARE @RHeader table (Id int)
DECLARE @TxDetail table (TRANSACTION_ID int, RECEIPTDETAIL_ID int)

--Short name of the rollback table
INSERT INTO @RHeader(ID)
SELECT RH.RECEIPTHEADER_ID
FROM RECEIPTHEADERS (NOLOCK) RH INNER JOIN rollbackdb.dbo.ANE_100XXX_RECEIPTHEADERS BAK ON BAK.RECEIPTHEADER_ID = RH.RECEIPTHEADER_ID AND BAK.RECEIPTNUMBER = RH.RECEIPTNUMBER
WHERE RH.VOIDED = -1

INSERT INTO @TxDetail(TRANSACTION_ID, RECEIPTDETAIL_ID)
SELECT RD.TRANSACTION_ID, RD.RECEIPTDETAIL_ID FROM RECEIPTDETAILS RD (NOLOCK) INNER JOIN TRANSACTIONS T (NOLOCK) ON T.TRANSACTION_ID = RD.TRANSACTION_ID
WHERE T.RECEIPTHEADER_ID IN (SELECT ID FROM @RHeader)

BEGIN TRANSACTION
	UPDATE RECEIPTHEADERS
	SET VOIDED = @voided, VOIDEDBY = @voidedby, VOIDEDON = @voidedon
	WHERE RECEIPTHEADER_ID IN (SELECT ID FROM @RHeader)

	UPDATE TRANSACTIONS
	SET VOIDED = @voided, VOIDEDBY = @voidedby, VOIDEDON = @voidedon, TRANSACTIONTYPE = ORIGINALTRANSACTIONTYPE, ORIGINALTRANSACTIONTYPE = 0
	WHERE TRANSACTION_ID IN (SELECT TRANSACTION_ID FROM @TxDetail)

	UPDATE RECEIPTDETAILS
	SET VOIDED = @voided, VOIDEDBY = @voidedby, VOIDEDON = @voidedon
	WHERE RECEIPTDETAIL_ID IN (SELECT RECEIPTDETAIL_ID FROM @TxDetail)

	UPDATE RECEIPTPAYMENTS
	SET VOIDED = @voided, VOIDEDBY = @voidedby, VOIDEDON = @voidedon
	WHERE RECEIPTHEADER_ID IN (SELECT ID FROM @RHeader)

	UPDATE GL_LEDGER
	SET VOIDED = @voided, VOIDEDBY = @voidedby, VOIDEDON = @voidedon
	WHERE RECEIPTDETAIL_ID IN (SELECT RECEIPTDETAIL_ID FROM @TxDetail)

	INSERT INTO GL_LEDGER_LOG(GL_LEDGER_ID, TYPE_ID, DESCRIPTION, DATE_STAMP)
	SELECT GL_LEDGER_ID, 6, @voiddesc, @voidedon FROM GL_LEDGER (NOLOCK)
	WHERE RECEIPTDETAIL_ID IN (SELECT RECEIPTDETAIL_ID FROM @TxDetail)

	--Cash Rounding
	UPDATE GL_LEDGER
	SET VOIDED = @voided, VOIDEDBY = @voidedby, VOIDEDON = @voidedon
	WHERE RECEIPTDETAIL_ID IS NULL
		AND RECEIPTPAYMENT_ID IN (
			SELECT RECEIPTPAYMENT_ID FROM RECEIPTPAYMENTS (NOLOCK)
			WHERE RECEIPTHEADER_ID IN (SELECT ID FROM @RHeader) AND PAYMENTTYPE_ID = 1
		)

	INSERT INTO GL_LEDGER_LOG(GL_LEDGER_ID, TYPE_ID, DESCRIPTION, DATE_STAMP)
	SELECT GL_LEDGER_ID, 6, @voiddesc, @voidedon FROM GL_LEDGER (NOLOCK)
	WHERE RECEIPTDETAIL_ID IS NULL
		AND RECEIPTPAYMENT_ID IN (
			SELECT RECEIPTPAYMENT_ID FROM RECEIPTPAYMENTS (NOLOCK)
			WHERE RECEIPTHEADER_ID IN (SELECT ID FROM @RHeader) AND PAYMENTTYPE_ID = 1
		)

	UPDATE ARSCHEDULEHEADER
	SET VOIDED = @voided, VOIDEDBY = @voidedby, VOIDEDON = @voidedon
	WHERE RECEIPTPAYMENT_ID IN (
		SELECT RECEIPTPAYMENT_ID FROM RECEIPTPAYMENTS (NOLOCK)
		WHERE RECEIPTHEADER_ID IN (SELECT ID FROM @RHeader)
	)

	UPDATE ARSCHEDULEDETAIL
	SET VOIDED = @voided, VOIDEDBY = @voidedby, VOIDEDON = @voidedon
	WHERE ARSCHEDULEHEADER_ID IN (
			SELECT ARSCHEDULEHEADER_ID
			FROM ARSCHEDULEHEADER AH (NOLOCK) INNER JOIN RECEIPTPAYMENTS RP (NOLOCK) ON RP.RECEIPTPAYMENT_ID = AH.RECEIPTPAYMENT_ID
			WHERE RP.RECEIPTHEADER_ID IN (SELECT ID FROM @RHeader)
		)

	UPDATE ARTRANSACTIONS
	SET VOIDED = @voided, VOIDEDBY = @voidedby, VOIDEDON = @voidedon
	WHERE RECEIPTHEADER_ID IN (SELECT ID FROM @RHeader)

	UPDATE CUSTOMERACCOUNTS
	SET VOIDED = @voided, VOIDEDBY = @voidedby, VOIDEDON = @voidedon
	WHERE RECEIPTHEADER_ID IN (SELECT ID FROM @RHeader)
	
	--DISCOUNTDEPENDENCYLINKS
	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_DISCOUNTDEPENDENCYLINKS') IS NOT NULL BEGIN
		UPDATE U
		SET COUNTED_AS_PERSON = BAK.COUNTED_AS_PERSON,
			COUNTED_AS_ITEM = BAK.COUNTED_AS_ITEM,
			COUNTED_AS_TRANSACTION = BAK.COUNTED_AS_TRANSACTION
		FROM DISCOUNTDEPENDENCYLINKS U, rollbackdb.dbo.ANE_100XXX_DISCOUNTDEPENDENCYLINKS BAK
		WHERE U.DISCOUNT_DEPENDENCY_LINK_ID = BAK.DISCOUNT_DEPENDENCY_LINK_ID
	END
	
	--GIFT_CERTIFICATES
	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_GIFT_CERTIFICATES') IS NOT NULL BEGIN
		UPDATE U SET STATUS = BAK.STATUS
		FROM GIFT_CERTIFICATES U, rollbackdb.dbo.ANE_100XXX_GIFT_CERTIFICATES BAK
		WHERE U.GIFT_CERTIFICATE_ID = BAK.GIFT_CERTIFICATE_ID
	END

	--CUSTOMERSCHOLARSHIP
	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_CUSTOMERSCHOLARSHIP') IS NOT NULL BEGIN
		SET IDENTITY_INSERT CUSTOMERSCHOLARSHIP ON
		INSERT INTO CUSTOMERSCHOLARSHIP (CUSTOMERSCHOLARSHIP_ID, ORIGINALSCHOLARSHIP_ID, CUSTOMER_ID, CHARGE_ID, AMOUNT, STARTDATE, EXPIRATIONDATE, RECEIPTDETAIL_ID, DATESTAMP, SYSTEMUSER_ID, SITE_ID, STATION_ID, LOCK_ID, APPLIES_TO_ALL_ACTIVITIES, APPLIES_TO_ALL_PROGRAMS, APPLIES_TO_ALL_PACKAGES, ACTIVITY_GROUP_NUMBER, DCPROGRAM_GROUP_NUMBER, ACTIVATE_QUALIFYING, RECEIPTPAYMENT_ID, AWARDED_AT_ENROLLMENT, VOIDED, VOIDEDBY, VOIDEDON, SCHOLARSHIP_APPLICATION_ID, IS_AMOUNT_UNSPECIFIED, SELECTED_ACTIVITIES_QUALIFY_TYPE, SELECTED_PROGRAMS_QUALIFY_TYPE, SELECTED_MEMBERSHIPS_QUALIFY_TYPE, FAMILY_ID)
		SELECT CUSTOMERSCHOLARSHIP_ID, ORIGINALSCHOLARSHIP_ID, CUSTOMER_ID, CHARGE_ID, AMOUNT, STARTDATE, EXPIRATIONDATE, RECEIPTDETAIL_ID, DATESTAMP, SYSTEMUSER_ID, SITE_ID, STATION_ID, LOCK_ID, APPLIES_TO_ALL_ACTIVITIES, APPLIES_TO_ALL_PROGRAMS, APPLIES_TO_ALL_PACKAGES, ACTIVITY_GROUP_NUMBER, DCPROGRAM_GROUP_NUMBER, ACTIVATE_QUALIFYING, RECEIPTPAYMENT_ID, AWARDED_AT_ENROLLMENT, VOIDED, VOIDEDBY, VOIDEDON, SCHOLARSHIP_APPLICATION_ID, IS_AMOUNT_UNSPECIFIED, SELECTED_ACTIVITIES_QUALIFY_TYPE, SELECTED_PROGRAMS_QUALIFY_TYPE, SELECTED_MEMBERSHIPS_QUALIFY_TYPE, FAMILY_ID
		FROM rollbackdb.dbo.ANE_100XXX_CUSTOMERSCHOLARSHIP
		SET IDENTITY_INSERT CUSTOMERSCHOLARSHIP OFF
	END

	--FACILITY_SCHEDULE_CHECKINOUT
	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_FACILITY_SCHEDULE_CHECKINOUT') IS NOT NULL BEGIN
		SET IDENTITY_INSERT FACILITY_SCHEDULE_CHECKINOUT ON
		INSERT INTO FACILITY_SCHEDULE_CHECKINOUT (ID, FACILITY_SCHEDULE_ID, CHECKIN_DATETIME, CHECKOUT_DATETIME, CHECKIN_STATUS)
		SELECT ID, FACILITY_SCHEDULE_ID, CHECKIN_DATETIME, CHECKOUT_DATETIME, CHECKIN_STATUS
		FROM rollbackdb.dbo.ANE_100XXX_FACILITY_SCHEDULE_CHECKINOUT
		SET IDENTITY_INSERT FACILITY_SCHEDULE_CHECKINOUT OFF
	END

	--ACTIVITYATTENDANCE
	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_ACTIVITYATTENDANCE') IS NOT NULL BEGIN
		SET IDENTITY_INSERT ACTIVITYATTENDANCE ON
		INSERT INTO ACTIVITYATTENDANCE (ACTIVITYATTENDANCE_ID, ACTIVITY_DATE_ID, TRANSACTION_ID, ACTIVITY_INSTRUCTOR_ID, SUB_INSTRUCTOR_ID, FACILITY_SCHEDULE_ID, NUMBER_OF_MINUTES, PAYROLL_STATUS, START_DATE_TIME, SITE_ID, ATTENDANCE_CODE_ID, PAYROLL_PERIOD_ID, ABSENT, ATTENDANCE_NOTE, MAKEUP_ATTENDANCE_CODE_ID, MAKEUP_ABSENT, MAKEUP_ATTENDANCE_NOTE, MAKEUP_ATTENDANCE_STATUS, CHECKINSYSTEMUSER_ID, CHECKINDATETIME, CHECK_IN_SOURCE_TYPE)
		SELECT ACTIVITYATTENDANCE_ID, ACTIVITY_DATE_ID, TRANSACTION_ID, ACTIVITY_INSTRUCTOR_ID, SUB_INSTRUCTOR_ID, FACILITY_SCHEDULE_ID, NUMBER_OF_MINUTES, PAYROLL_STATUS, START_DATE_TIME, SITE_ID, ATTENDANCE_CODE_ID, PAYROLL_PERIOD_ID, ABSENT, ATTENDANCE_NOTE, MAKEUP_ATTENDANCE_CODE_ID, MAKEUP_ABSENT, MAKEUP_ATTENDANCE_NOTE, MAKEUP_ATTENDANCE_STATUS, CHECKINSYSTEMUSER_ID, CHECKINDATETIME, CHECK_IN_SOURCE_TYPE
		FROM rollbackdb.dbo.ANE_100XXX_ACTIVITYATTENDANCE
		SET IDENTITY_INSERT ACTIVITYATTENDANCE OFF
	END

	--FACILITY_SCHEDULES
	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_FACILITY_SCHEDULES') IS NOT NULL BEGIN
		SET IDENTITY_INSERT FACILITY_SCHEDULES ON
		INSERT INTO FACILITY_SCHEDULES (SITE_ID, FACILITY_SCHEDULE_ID, DCSESSION_ID, FACILITY_ID, PERMIT_ID, ACTIVITY_ID, TRANSACTION_ID, STATION_ID, SYSTEMUSER_ID, STARTSCHEDULEDATE, ENDSCHEDULEDATE, STARTSCHEDULETIME, ENDSCHEDULETIME, ATTENDANCE, CONFLICTING, EVENTNAME, STARTEVENTDATE, ENDEVENTDATE, STARTEVENTTIME, ENDEVENTTIME, HOLDEXPIRATIONDATE, HOLDTYPE, HOLDUSERID, MODULE, OVERLAP, RELATIONID, EVENTNOTES, TENTATIVEOWNER, WAITLISTDATETIME, CHECKOUTDATETIME, CHECKOUTCUSTOMER_ID, CHECKINDATETIME, CHECKOUTNOTES, CHECKOUTFIRSTNAME, CHECKOUTLASTNAME, LEAGUESCHEDULE_ID, PARENT_FACILITY_SCHEDULE_ID, RESCHEDULE, RESCHEDULED_FACILITY_SCHEDULE_ID, MAKE_UP_LESSON_DATES_ID, REFUNDED, PRIVATE_LESSON_GROUP_ID, ORIGINAL_LESSON_DURATION, NON_EXCLUSIVE, DATE_RANGE_DESCRIPTION, HOLD_HUMAN_RESOURCE_CUSTOMER_ID, HUMAN_RESOURCE_DEFAULT_FACILITY_ID, ENROLLMENT_PENDING_ADDS_PK, EVENT_ATTENDANCE, RENTAL_BLOCK_ID, DATE_RANGE_ID, TENTATIVE_WORKSTATION_ID, TENTATIVE_SEARCH_ID, TENTATIVE_TIME_SLOT_INDEX, MASTER_FACILITY_SCHEDULE_ID)
		SELECT SITE_ID, FACILITY_SCHEDULE_ID, DCSESSION_ID, FACILITY_ID, PERMIT_ID, ACTIVITY_ID, TRANSACTION_ID, STATION_ID, SYSTEMUSER_ID, STARTSCHEDULEDATE, ENDSCHEDULEDATE, STARTSCHEDULETIME, ENDSCHEDULETIME, ATTENDANCE, CONFLICTING, EVENTNAME, STARTEVENTDATE, ENDEVENTDATE, STARTEVENTTIME, ENDEVENTTIME, HOLDEXPIRATIONDATE, HOLDTYPE, HOLDUSERID, MODULE, OVERLAP, RELATIONID, EVENTNOTES, TENTATIVEOWNER, WAITLISTDATETIME, CHECKOUTDATETIME, CHECKOUTCUSTOMER_ID, CHECKINDATETIME, CHECKOUTNOTES, CHECKOUTFIRSTNAME, CHECKOUTLASTNAME, LEAGUESCHEDULE_ID, PARENT_FACILITY_SCHEDULE_ID, RESCHEDULE, RESCHEDULED_FACILITY_SCHEDULE_ID, MAKE_UP_LESSON_DATES_ID, REFUNDED, PRIVATE_LESSON_GROUP_ID, ORIGINAL_LESSON_DURATION, NON_EXCLUSIVE, DATE_RANGE_DESCRIPTION, HOLD_HUMAN_RESOURCE_CUSTOMER_ID, HUMAN_RESOURCE_DEFAULT_FACILITY_ID, ENROLLMENT_PENDING_ADDS_PK, EVENT_ATTENDANCE, RENTAL_BLOCK_ID, DATE_RANGE_ID, TENTATIVE_WORKSTATION_ID, TENTATIVE_SEARCH_ID, TENTATIVE_TIME_SLOT_INDEX, MASTER_FACILITY_SCHEDULE_ID
		FROM rollbackdb.dbo.ANE_100XXX_FACILITY_SCHEDULES
		SET IDENTITY_INSERT FACILITY_SCHEDULES OFF
	END

	--LOCKER_SCHEDULES
	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_LOCKER_SCHEDULES') IS NOT NULL BEGIN
		SET IDENTITY_INSERT LOCKER_SCHEDULES ON
		INSERT INTO LOCKER_SCHEDULES (LOCKER_SCHEDULE_ID, SITE_ID, LOCKER_ID, TRANSACTION_ID, STATION_ID, SYSTEMUSER_ID, STARTDATETIME, ENDDATETIME, TENTATIVEOWNER, TENTATIVE_WORKSTATION_ID, TENTATIVE_SEARCH_ID, TENTATIVE_TIME_SLOT_INDEX)
		SELECT LOCKER_SCHEDULE_ID, SITE_ID, LOCKER_ID, TRANSACTION_ID, STATION_ID, SYSTEMUSER_ID, STARTDATETIME, ENDDATETIME, TENTATIVEOWNER, TENTATIVE_WORKSTATION_ID, TENTATIVE_SEARCH_ID, TENTATIVE_TIME_SLOT_INDEX
		FROM rollbackdb.dbo.ANE_100XXX_LOCKER_SCHEDULES
		SET IDENTITY_INSERT LOCKER_SCHEDULES OFF
	END

	--CAMPAIGN_SCHEDULED_DONATIONS
	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_CAMPAIGN_SCHEDULED_DONATIONS') IS NOT NULL BEGIN
		SET IDENTITY_INSERT CAMPAIGN_SCHEDULED_DONATIONS ON
		INSERT INTO CAMPAIGN_SCHEDULED_DONATIONS (CAMPAIGN_DONATION_SCHEDULE_ID, RECEIPTHEADER_ID, DUE_DATE, CAMPAIGN_DONATION_ID)
		SELECT CAMPAIGN_DONATION_SCHEDULE_ID, RECEIPTHEADER_ID, DUE_DATE, CAMPAIGN_DONATION_ID
		FROM rollbackdb.dbo.ANE_100XXX_CAMPAIGN_SCHEDULED_DONATIONS
		SET IDENTITY_INSERT CAMPAIGN_SCHEDULED_DONATIONS OFF
	END

	--LINKEDCREDITS
	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_LINKEDCREDITS') IS NOT NULL BEGIN
		UPDATE U
		SET UNLINKED = BAK.UNLINKED,
			UNLINKED_DATE = BAK.UNLINKED_DATE,
			UNLINKED_BY = BAK.UNLINKED_BY
		FROM LINKEDCREDITS U, rollbackdb.dbo.ANE_100XXX_LINKEDCREDITS BAK
		WHERE U.LINKED_CREDIT_ID = BAK.LINKED_CREDIT_ID
	END

	UPDATE USAGE_FEE_TRANSACTIONS SET VOIDED = @voided WHERE RECEIPTHEADER_ID IN (SELECT ID FROM @RHeader)

	UPDATE TRANSACTIONCOUPONS SET REFUNDED = @voided WHERE TRANSACTION_ID IN (SELECT TRANSACTION_ID FROM @TxDetail)

	UPDATE MEMBERSHIP_USAGES SET VOIDEDBY = @voidedby, VOIDEDON = @voidedon
	WHERE RECEIPTHEADER_ID IN (SELECT ID FROM @RHeader)

	UPDATE DCREGISTRATIONCHANGES SET VOIDED = @voided, VOIDEDBY = @voidedby, VOIDEDON = @voidedon
	WHERE TRANSACTION_ID IN (SELECT TRANSACTION_ID FROM @TxDetail)


	DECLARE @backup_table varchar(100) = 'ANE_100XXX_RECEIPTHEADERS'
	DECLARE @new_name varchar(100) = @backup_table + '_R_' + cast(@return as varchar)
	EXEC rollbackdb.sys.sp_rename @backup_table,  @new_name

	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_DISCOUNTDEPENDENCYLINKS') IS NOT NULL BEGIN
		SET @backup_table = 'ANE_100XXX_DISCOUNTDEPENDENCYLINKS'
		SET @new_name = @backup_table + '_R_' + cast(@return as varchar)
		EXEC rollbackdb.sys.sp_rename @backup_table,  @new_name
	END

	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_GIFT_CERTIFICATES') IS NOT NULL BEGIN
		SET @backup_table = 'ANE_100XXX_GIFT_CERTIFICATES'
		SET @new_name = @backup_table + '_R_' + cast(@return as varchar)
		EXEC rollbackdb.sys.sp_rename @backup_table,  @new_name
	END

	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_CUSTOMERSCHOLARSHIP') IS NOT NULL BEGIN
		SET @backup_table = 'ANE_100XXX_CUSTOMERSCHOLARSHIP'
		SET @new_name = @backup_table + '_R_' + cast(@return as varchar)
		EXEC rollbackdb.sys.sp_rename @backup_table,  @new_name
	END

	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_FACILITY_SCHEDULE_CHECKINOUT') IS NOT NULL BEGIN
		SET @backup_table = 'ANE_100XXX_FACILITY_SCHEDULE_CHECKINOUT'
		SET @new_name = @backup_table + '_R_' + cast(@return as varchar)
		EXEC rollbackdb.sys.sp_rename @backup_table,  @new_name
	END

	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_ACTIVITYATTENDANCE') IS NOT NULL BEGIN
		SET @backup_table = 'ANE_100XXX_ACTIVITYATTENDANCE'
		SET @new_name = @backup_table + '_R_' + cast(@return as varchar)
		EXEC rollbackdb.sys.sp_rename @backup_table,  @new_name
	END

	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_FACILITY_SCHEDULES') IS NOT NULL BEGIN
		SET @backup_table = 'ANE_100XXX_FACILITY_SCHEDULES'
		SET @new_name = @backup_table + '_R_' + cast(@return as varchar)
		EXEC rollbackdb.sys.sp_rename @backup_table,  @new_name
	END

	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_LOCKER_SCHEDULES') IS NOT NULL BEGIN
		SET @backup_table = 'ANE_100XXX_LOCKER_SCHEDULES'
		SET @new_name = @backup_table + '_R_' + cast(@return as varchar)
		EXEC rollbackdb.sys.sp_rename @backup_table,  @new_name
	END

	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_CAMPAIGN_SCHEDULED_DONATIONS') IS NOT NULL BEGIN
		SET @backup_table = 'ANE_100XXX_CAMPAIGN_SCHEDULED_DONATIONS'
		SET @new_name = @backup_table + '_R_' + cast(@return as varchar)
		EXEC rollbackdb.sys.sp_rename @backup_table,  @new_name
	END

	IF OBJECT_ID('rollbackdb.dbo.ANE_100XXX_LINKEDCREDITS') IS NOT NULL BEGIN
		SET @backup_table = 'ANE_100XXX_LINKEDCREDITS'
		SET @new_name = @backup_table + '_R_' + cast(@return as varchar)
		EXEC rollbackdb.sys.sp_rename @backup_table,  @new_name
	END
	
	PRINT char(10) + 'Rollback is done.'
COMMIT TRANSACTION
